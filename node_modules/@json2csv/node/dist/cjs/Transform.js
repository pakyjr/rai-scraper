var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Transform_exports = {};
__export(Transform_exports, {
  default: () => JSON2CSVNodeTransform
});
module.exports = __toCommonJS(Transform_exports);
var import_os = __toESM(require("os"));
var import_stream = require("stream");
var import_plainjs = require("@json2csv/plainjs");
var import_utils = require("./utils.js");
class JSON2CSVNodeTransform extends import_stream.Transform {
  constructor(opts = {}, transformOpts = {}, asyncOptions = {}) {
    super(transformOpts);
    (0, import_utils.fakeInherit)(this, import_plainjs.StreamParser);
    this.endUnderlayingParser = import_plainjs.StreamParser.prototype.end;
    this.opts = this.preprocessOpts({
      ...opts,
      eol: opts.eol || import_os.default.EOL
    });
    this.initTokenizer(opts, {
      ...asyncOptions,
      objectMode: transformOpts.objectMode || transformOpts.readableObjectMode
    });
    if (this.opts.fields)
      this.preprocessFieldsInfo(this.opts.fields);
  }
  onHeader(header) {
    this.emit("header", header);
  }
  onLine(line) {
    this.emit("line", line);
  }
  onData(data) {
    this.push(data);
  }
  onError(err) {
    throw err;
  }
  onEnd() {
    if (!this.writableEnded)
      this.end();
  }
  /**
   * Main function that send data to the parse to be processed.
   *
   * @param {Buffer} chunk Incoming data
   * @param {String} encoding Encoding of the incoming data. Defaults to 'utf8'
   * @param {Function} done Called when the proceesing of the supplied chunk is done
   */
  _transform(chunk, encoding, done) {
    try {
      this.tokenizer.write(chunk);
      done();
    } catch (err) {
      done(err);
    }
  }
  _final(done) {
    try {
      this.endUnderlayingParser();
      done();
    } catch (err) {
      done(err);
    }
  }
  promise() {
    return new Promise((resolve, reject) => {
      const csvBuffer = [];
      this.on("data", (chunk) => csvBuffer.push(chunk.toString())).on("finish", () => resolve(csvBuffer.join(""))).on("error", (err) => reject(err));
    });
  }
}
