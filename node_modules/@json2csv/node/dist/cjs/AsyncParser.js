var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var AsyncParser_exports = {};
__export(AsyncParser_exports, {
  default: () => JSON2CSVNodeAsyncParser
});
module.exports = __toCommonJS(AsyncParser_exports);
var import_stream = require("stream");
var import_Transform = __toESM(require("./Transform.js"));
class JSON2CSVNodeAsyncParser {
  constructor(opts, transformOpts) {
    this.opts = opts;
    this.transformOpts = transformOpts;
  }
  /**
   * Main function that converts json to csv.
   *
   * @param {Stream|Array|Object} data Array of JSON objects to be converted to CSV
   * @returns {Stream} A stream producing the CSV formated data as a string
   */
  parse(data) {
    if (typeof data === "string" || ArrayBuffer.isView(data)) {
      data = import_stream.Readable.from(data, { objectMode: false });
    } else if (Array.isArray(data)) {
      data = import_stream.Readable.from(data.filter((item) => item !== null));
    } else if (typeof data === "object" && !(data instanceof import_stream.Readable)) {
      data = import_stream.Readable.from([data]);
    }
    if (!(data instanceof import_stream.Readable)) {
      throw new Error(
        "Data should be a JSON object, JSON array, typed array, string or stream"
      );
    }
    return data.pipe(
      new import_Transform.default(this.opts, {
        objectMode: data.readableObjectMode,
        ...this.transformOpts
      })
    );
  }
}
